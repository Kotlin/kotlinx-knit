/*
 * Copyright 2016-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

package kotlinx.knit

import java.io.*
import java.nio.file.*
import kotlin.streams.*
import kotlin.test.*

private val TEST_DATA_DIR = Paths.get("testdata")
private val TEST_KT = Paths.get("test", "TestDataTest.kt")
private const val IN_MD_SUFFIX = ".in.md"
private const val OUT_MD_SUFFIX = ".out.md"
private const val PROPERTIES_SUFFIX = ".properties"

private const val GENERATED_COMMENT = "// !!! AUTOMATICALLY GENERATED BY TestDataGen. DO NOT EDIT !!!"

/**
 * Writes [TestDataTest] based on the contents of `testdata` directory.
 */
fun main() {
    val out = PrintWriter(Files.newOutputStream(TEST_KT))
    out.println(GENERATED_COMMENT)
    out.println("package kotlinx.knit")
    out.println()
    out.println("import kotlin.test.Test")
    out.println()
    out.println("class TestDataTest {")
    Files.newDirectoryStream(TEST_DATA_DIR, "*$IN_MD_SUFFIX").use {
        it.sorted().forEachIndexed { index, inFile ->
            if (index > 0) out.println()
            writeTest(out, inFile)
        }
    }
    out.println("}")
    out.close()
}

private fun writeTest(out: PrintWriter, inPath: Path) {
    // collect files
    val inFileName = inPath.fileName.toString()
    assertTrue(inFileName.endsWith(IN_MD_SUFFIX))
    val testPrefix = inFileName.substring(0, inFileName.length - IN_MD_SUFFIX.length)
    val testName = testPrefix.split("-").map { it.capitalize() }.joinToString("")
    val outPath = TEST_DATA_DIR.resolve(testPrefix + OUT_MD_SUFFIX).takeIfExists() ?: inPath
    val propsPath = TEST_DATA_DIR.resolve(testPrefix + PROPERTIES_SUFFIX).takeIfExists()
    val params = mutableListOf<Any?>(testName, inPath, outPath, propsPath)
    // additional copied files
    Files.newDirectoryStream(TEST_DATA_DIR, "$testPrefix.copy.*").use { dirEntries ->
        dirEntries.asSequence()
            .map { path -> FileRef.Copy(path.toUnixPath()) }
            .sortedBy { it.path }
            .toCollection(params)
    }
    // files from the "testPrefix" directory are expected
    val extraDir = inPath.parent.resolve(testPrefix)
    if (Files.exists(extraDir)) {
        Files.walk(extraDir).use { dirEntries ->
            dirEntries.asSequence()
                .filter { path -> Files.isRegularFile(path) }
                .map { path -> FileRef.Expect(path.toUnixPath()) }
                .sortedBy { it.path }
                .toCollection(params)
        }
    }
    // write test
    out.println("    $GENERATED_COMMENT")
    out.println("    @Test")
    out.println("    fun test$testName() {")
    out.println("       verifyTestData(")
    params.forEachIndexed { index, p -> out.printlnParam(p, index == params.lastIndex) }
    out.println("       )")
    out.println("    }")
}

private fun Path.toUnixPath(): String = toString().replace('\\', '/')

private fun PrintWriter.printlnParam(p: Any?, last: Boolean = false) {
    print("           ")
    when (p) {
        null -> print("null")
        is String -> print("\"$p\"")
        is Path -> print("\"${p.toUnixPath()}\"")
        is FileRef -> print(p)
        else -> error("Unsupported param type ${p::class}")
    }
    if (!last) print(",")
    println()
}

private fun Path.takeIfExists(): Path? =
    if (Files.exists(this)) this else null
